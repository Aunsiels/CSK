from quasimodo.data_structures.module_interface import ModuleInterface
from quasimodo.default_submodule_factory import DefaultSubmoduleFactory
import logging
import objgraph


class AssertionNormalizationModule(ModuleInterface):
    """AssertionNormalizationModule
    A class to normalize the assertion generated by other modules
    """

    def __init__(self):
        module_names = ["tbc-cleaner",
                        "lower-case",
                        "only-subject", "no-personal", "singular-subject",
                        "cleaning-predicate", "basic-modality",
                        "present-continuous", "are-transformation",
                        "can-transformation", "filter-object",
                        "be-normalization",
                        "identical-subj-obj",
                        "present-conjugate",
                        "similar-object-remover",
                        "fact-combinor"]
        super(AssertionNormalizationModule, self).__init__(
            module_names, DefaultSubmoduleFactory())
        self._name = "Assertion Normalization Module"

    def process(self, input_interface):
        logging.info("Start the assertion normalization module")
        for submodule in self._submodules:
            input_interface = submodule.process(input_interface)
            submodule.clean()
            logging.info(objgraph.growth())
            logging.info(objgraph.most_common_types())
        return input_interface
